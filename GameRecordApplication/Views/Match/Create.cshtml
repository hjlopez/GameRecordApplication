@model GameRecordApplication.ViewModels.MatchViewModel
@{
    ViewBag.Title = "Create";


}

@if (ViewBag.Message != "")
{
    <div class="alert alert-danger" role="alert" data-dismiss="alert">
        @ViewBag.Message
    </div>
}

<h3>Insert Match Played</h3>
@using (Html.BeginForm("Create", "Match", new { Category = Request["Category"] }, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Game.GameName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Game.GameName, new { htmlAttributes = new { @class = "form-control" }, disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.Game.GameName, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.Game.HasSeason) // if game has season
        {
            <div class="form-group">
                @Html.Label("Season", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ListOfSeasons,
                  new SelectList(Model.ListOfSeasons, "SeasonNumber", "SeasonNumber"), new { htmlAttributes = new { @class = "form-control" }, Name = "Season" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.Label("Winning Player", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ListOfUsers,
                 new SelectList(Model.ListOfUsers, "UserId", "FirstName"), new { htmlAttributes = new { @class = "form-control" }, Name = "WinPlayer" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Losing Player", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ListOfUsers,
                 new SelectList(Model.ListOfUsers, "UserId", "FirstName"), new { htmlAttributes = new { @class = "form-control" }, Name = "LossPlayer" })
            </div>
        </div>

        
        
        @if ( Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Hero Name").AciveField)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.DotaHero.Localized_name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DotaHero.Localized_name, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.DotaHero.Localized_name, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        
        @if ( Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Weapon Name").AciveField)
        {
            <div class="form-group">
            @Html.LabelFor(model => model.Weapon.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Weapon.name, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Weapon.name, "", new { @class = "text-danger" })
            </div>
        </div>
        }
        
        @if(Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Team Win").AciveField)
        {
            <div class="form-group">
            @Html.LabelFor(model => model.Match.TeamWin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*<div class="checkbox">*@
                    @Html.EditorFor(model => model.Match.TeamWin)
                    @Html.ValidationMessageFor(model => model.Match.TeamWin, "", new { @class = "text-danger" })
                    @*</div>  *@
                </div>
        </div>
        }

        @if(Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Hours").AciveField)
        {
            <div class="form-group">
            @Html.LabelFor(model => model.Match.Hours, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Match.Hours, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Match.Hours, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        

        @if(Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Minutes").AciveField)
        {
            <div class="form-group">
            @Html.LabelFor(model => model.Match.Minutes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Match.Minutes, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Match.Minutes, "", new { @class = "text-danger" })
            </div>
        </div>
        }
        

        @if(Model.ListOfFields.Count() != 0 && Model.ListOfFields.First(a => a.FieldName == "Seconds").AciveField)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Match.Seconds, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Match.Seconds, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Match.Seconds, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        
        
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create New Match" class="btn btn-success" />
            </div>
        </div>
    </div>
}
<div>
    <a class="btn btn-danger" href="@Url.Action("Index","GameStats",new { Category = Request["Category"] })">Return</a>
</div>
